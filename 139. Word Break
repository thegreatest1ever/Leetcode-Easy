function wordBreak(s, wordDict) {
  // Create an array to keep track of whether a substring ending at index i can be segmented.
  // Initialize with false values. dp[i] will be true if s.substring(0, i+1) can be segmented.
  let dp = new Array(s.length).fill(false);

  for (let i = 0; i < s.length; i++) {
    // If the substring from 0 to i is in the wordDict, set dp[i] to true.
    if (wordDict.includes(s.substring(0, i + 1))) {
      dp[i] = true;
    } else {
      // If not, check if the substring can be segmented into smaller words.
      for (let j = 0; j < i; j++) {
        if (dp[j] && wordDict.includes(s.substring(j + 1, i + 1))) {
          dp[i] = true;
          break; // No need to continue checking
        }
      }
    }
  }

  // The final value in dp array indicates whether the entire string can be segmented.
  return dp[s.length - 1];
}
//

class Solution(object):
  def wordBreak(self, s, wordDict):
    n = len(s)
    dp = [False] * n
    
    for i in range(n):
      if s[:i + 1] in wordDict:
        dp[i] = True
      else:
          for j in range(i):
            if dp[j] and s[j + 1:i + 1] in wordDict:
              dp[i] = True
              break
    return dp[-1]

//
function wordBreak(s: string, wordDict: string[]): boolean {
    // Create an array to keep track of whether a substring ending at index i can be segmented.
    // Initialize with false values. dp[i] will be true if s.substring(0, i+1) can be segmented.
    const n = s.length;
    const dp: boolean[] = new Array(n).fill(false);

    for (let i = 0; i < n; i++) {
        // If the substring from 0 to i is in the wordDict, set dp[i] to true.
        if (wordDict.includes(s.substring(0, i + 1))) {
            dp[i] = true;
        } else {
            // If not, check if the substring can be segmented into smaller words.
            for (let j = 0; j < i; j++) {
                if (dp[j] && wordDict.includes(s.substring(j + 1, i + 1))) {
                    dp[i] = true;
                    break; // No need to continue checking
                }
            }
        }
    }

    // The final value in dp array indicates whether the entire string can be segmented.
    return dp[n - 1];
}
